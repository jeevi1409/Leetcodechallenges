#include <stdlib.h>

// Definition for singly-linked list.


struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    // Create a dummy node which will be the starting point of the result list.
    struct ListNode dummy;
    struct ListNode *current = &dummy;
    dummy.next = NULL;

    // Initialize carry to 0
    int carry = 0;

    // Traverse both linked lists
    while (l1 != NULL || l2 != NULL) {
        // Get the current values and move to the next nodes
        int x = (l1 != NULL) ? l1->val : 0;
        int y = (l2 != NULL) ? l2->val : 0;

        // Calculate the sum of the current digits and the carry
        int sum = carry + x + y;

        // Update the carry for the next step
        carry = sum / 10;

        // Create a new node for the current digit of the result
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = sum % 10;
        newNode->next = NULL;

        // Attach the new node to the result list
        current->next = newNode;
        current = current->next;

        // Move to the next nodes in the input lists
        if (l1 != NULL) l1 = l1->next;
        if (l2 != NULL) l2 = l2->next;
    }

    // If there is any carry left, add a new node with the carry value
    if (carry > 0) {
        struct ListNode* newNode = (struct ListNode*)malloc(sizeof(struct ListNode));
        newNode->val = carry;
        newNode->next = NULL;
        current->next = newNode;
    }

    // Return the next node of the dummy node, which is the start of the result list
    return dummy.next;
}
